{

	"mutation": {
		"scope": "javascript, typescript",
		"prefix": "mutation",
		"body": [
			"mutation({",
			"    args:{",
			"        $1",
			"    },",
			"    handler: async (ctx, args) => {",
			"        $2",
			"    }",
			"})"
		],
		"description": "Database Mutation endpoint base code"
	},

	"query": {
		"scope": "javascript, typescript",
		"prefix": "query",
		"body": [
			"query({",
			"    args:{",
			"        $1",
			"    },",
			"    handler: async (ctx, args) => {",
			"        $2",
			"    }",
			"});"
		],
		"description": "Database Query endpoint base code"
	},

	"userIdMutation": {
		"scope": "javascript, typescript",
		"prefix": "mutateUserId",
		"body": [
			"const userId = await auth.getUserId(ctx);",
			"",
			"if (!userId) {",
			"    throw new Error('Unauthorized');",
			"}",
			"",
			"$1"
		],
		"description": "Check for current user login status"
	},

	"userIdQuery": {
		"scope": "javascript, typescript",
		"prefix": "queryUserId",
		"body": [
			"const userId = await auth.getUserId(ctx);",
			"",
			"if (!userId) {",
			"    return null;",
			"}",
			"",
			"$1"
		],
		"description": "Check for current user login status"
	},

	"mutateAdmin": {
		"scope": "javascript, typescript",
		"prefix": "mutateAdmin",
		"body": [
			"const member = await ctx.db",
            ".query('members')",
            ".withIndex('by_workspace_id_user_id', (q) => ",
            "    q.eq('workspaceId', args.$1).eq('userId', userId))",
            ".unique();",
            "",
            "if(!member || member.role !== 'admin') {",
            "    throw new Error('Unauthorized');",
            "}  ",
			"$2"
		]
	},
	
	"queryAdmin": {
		"scope": "javascript, typescript",
		"prefix": "queryAdmin",
		"body": [
			"const member = await ctx.db",
            ".query('members')",
            ".withIndex('by_workspace_id_user_id', (q) => ",
            "    q.eq('workspaceId', args.$1).eq('userId', userId))",
            ".unique();",
            "",
            "if(!member || member.role !== 'admin') {",
            "    throw new Error('Unauthorized');",
            "}  ",
			"$2"
		]
	},

	"queryMember": {
		"scope": "javascript, typescript",
		"prefix": "queryMember",
		"body": [
			"const member = await ctx.db",
            ".query('members')",
            ".withIndex('by_workspace_id_user_id', (q) => ",
            "    q.eq('workspaceId', args.$1).eq('userId', userId))",
            ".unique();",
            "$2"
		]
	},
	
	// Place your slack-clone workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}